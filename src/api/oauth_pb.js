/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_api_annotations_pb = require('./google/api/annotations_pb.js');
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
var type_client_pb = require('./type/client_pb.js');
goog.exportSymbol('proto.programming_lab.prolab_accounts.OAuthConsentRequest', null, global);
goog.exportSymbol('proto.programming_lab.prolab_accounts.OAuthConsentResponse', null, global);
goog.exportSymbol('proto.programming_lab.prolab_accounts.OAuthLoginRequest', null, global);
goog.exportSymbol('proto.programming_lab.prolab_accounts.OAuthLoginResponse', null, global);
goog.exportSymbol('proto.programming_lab.prolab_accounts.StartOAuthConsentRequest', null, global);
goog.exportSymbol('proto.programming_lab.prolab_accounts.StartOAuthConsentResponse', null, global);
goog.exportSymbol('proto.programming_lab.prolab_accounts.StartOAuthLoginRequest', null, global);
goog.exportSymbol('proto.programming_lab.prolab_accounts.StartOAuthLoginResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.programming_lab.prolab_accounts.StartOAuthLoginRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.programming_lab.prolab_accounts.StartOAuthLoginRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.programming_lab.prolab_accounts.StartOAuthLoginRequest.displayName = 'proto.programming_lab.prolab_accounts.StartOAuthLoginRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.programming_lab.prolab_accounts.StartOAuthLoginRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.programming_lab.prolab_accounts.StartOAuthLoginRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.programming_lab.prolab_accounts.StartOAuthLoginRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.programming_lab.prolab_accounts.StartOAuthLoginRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    loginChallenge: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.programming_lab.prolab_accounts.StartOAuthLoginRequest}
 */
proto.programming_lab.prolab_accounts.StartOAuthLoginRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.programming_lab.prolab_accounts.StartOAuthLoginRequest;
  return proto.programming_lab.prolab_accounts.StartOAuthLoginRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.programming_lab.prolab_accounts.StartOAuthLoginRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.programming_lab.prolab_accounts.StartOAuthLoginRequest}
 */
proto.programming_lab.prolab_accounts.StartOAuthLoginRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLoginChallenge(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.programming_lab.prolab_accounts.StartOAuthLoginRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.programming_lab.prolab_accounts.StartOAuthLoginRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.programming_lab.prolab_accounts.StartOAuthLoginRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.programming_lab.prolab_accounts.StartOAuthLoginRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLoginChallenge();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string login_challenge = 1;
 * @return {string}
 */
proto.programming_lab.prolab_accounts.StartOAuthLoginRequest.prototype.getLoginChallenge = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.programming_lab.prolab_accounts.StartOAuthLoginRequest.prototype.setLoginChallenge = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.programming_lab.prolab_accounts.StartOAuthLoginResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.programming_lab.prolab_accounts.StartOAuthLoginResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.programming_lab.prolab_accounts.StartOAuthLoginResponse.displayName = 'proto.programming_lab.prolab_accounts.StartOAuthLoginResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.programming_lab.prolab_accounts.StartOAuthLoginResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.programming_lab.prolab_accounts.StartOAuthLoginResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.programming_lab.prolab_accounts.StartOAuthLoginResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.programming_lab.prolab_accounts.StartOAuthLoginResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    skip: jspb.Message.getFieldWithDefault(msg, 1, false),
    redirectUrl: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.programming_lab.prolab_accounts.StartOAuthLoginResponse}
 */
proto.programming_lab.prolab_accounts.StartOAuthLoginResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.programming_lab.prolab_accounts.StartOAuthLoginResponse;
  return proto.programming_lab.prolab_accounts.StartOAuthLoginResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.programming_lab.prolab_accounts.StartOAuthLoginResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.programming_lab.prolab_accounts.StartOAuthLoginResponse}
 */
proto.programming_lab.prolab_accounts.StartOAuthLoginResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSkip(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRedirectUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.programming_lab.prolab_accounts.StartOAuthLoginResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.programming_lab.prolab_accounts.StartOAuthLoginResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.programming_lab.prolab_accounts.StartOAuthLoginResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.programming_lab.prolab_accounts.StartOAuthLoginResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSkip();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getRedirectUrl();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bool skip = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.programming_lab.prolab_accounts.StartOAuthLoginResponse.prototype.getSkip = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.programming_lab.prolab_accounts.StartOAuthLoginResponse.prototype.setSkip = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string redirect_url = 2;
 * @return {string}
 */
proto.programming_lab.prolab_accounts.StartOAuthLoginResponse.prototype.getRedirectUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.programming_lab.prolab_accounts.StartOAuthLoginResponse.prototype.setRedirectUrl = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.programming_lab.prolab_accounts.OAuthLoginRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.programming_lab.prolab_accounts.OAuthLoginRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.programming_lab.prolab_accounts.OAuthLoginRequest.displayName = 'proto.programming_lab.prolab_accounts.OAuthLoginRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.programming_lab.prolab_accounts.OAuthLoginRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.programming_lab.prolab_accounts.OAuthLoginRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.programming_lab.prolab_accounts.OAuthLoginRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.programming_lab.prolab_accounts.OAuthLoginRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    loginChallenge: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    password: jspb.Message.getFieldWithDefault(msg, 3, ""),
    remember: jspb.Message.getFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.programming_lab.prolab_accounts.OAuthLoginRequest}
 */
proto.programming_lab.prolab_accounts.OAuthLoginRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.programming_lab.prolab_accounts.OAuthLoginRequest;
  return proto.programming_lab.prolab_accounts.OAuthLoginRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.programming_lab.prolab_accounts.OAuthLoginRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.programming_lab.prolab_accounts.OAuthLoginRequest}
 */
proto.programming_lab.prolab_accounts.OAuthLoginRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLoginChallenge(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRemember(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.programming_lab.prolab_accounts.OAuthLoginRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.programming_lab.prolab_accounts.OAuthLoginRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.programming_lab.prolab_accounts.OAuthLoginRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.programming_lab.prolab_accounts.OAuthLoginRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLoginChallenge();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRemember();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional string login_challenge = 1;
 * @return {string}
 */
proto.programming_lab.prolab_accounts.OAuthLoginRequest.prototype.getLoginChallenge = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.programming_lab.prolab_accounts.OAuthLoginRequest.prototype.setLoginChallenge = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.programming_lab.prolab_accounts.OAuthLoginRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.programming_lab.prolab_accounts.OAuthLoginRequest.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string password = 3;
 * @return {string}
 */
proto.programming_lab.prolab_accounts.OAuthLoginRequest.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.programming_lab.prolab_accounts.OAuthLoginRequest.prototype.setPassword = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool remember = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.programming_lab.prolab_accounts.OAuthLoginRequest.prototype.getRemember = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.programming_lab.prolab_accounts.OAuthLoginRequest.prototype.setRemember = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.programming_lab.prolab_accounts.OAuthLoginResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.programming_lab.prolab_accounts.OAuthLoginResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.programming_lab.prolab_accounts.OAuthLoginResponse.displayName = 'proto.programming_lab.prolab_accounts.OAuthLoginResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.programming_lab.prolab_accounts.OAuthLoginResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.programming_lab.prolab_accounts.OAuthLoginResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.programming_lab.prolab_accounts.OAuthLoginResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.programming_lab.prolab_accounts.OAuthLoginResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    redirectUrl: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.programming_lab.prolab_accounts.OAuthLoginResponse}
 */
proto.programming_lab.prolab_accounts.OAuthLoginResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.programming_lab.prolab_accounts.OAuthLoginResponse;
  return proto.programming_lab.prolab_accounts.OAuthLoginResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.programming_lab.prolab_accounts.OAuthLoginResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.programming_lab.prolab_accounts.OAuthLoginResponse}
 */
proto.programming_lab.prolab_accounts.OAuthLoginResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRedirectUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.programming_lab.prolab_accounts.OAuthLoginResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.programming_lab.prolab_accounts.OAuthLoginResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.programming_lab.prolab_accounts.OAuthLoginResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.programming_lab.prolab_accounts.OAuthLoginResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRedirectUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string redirect_url = 1;
 * @return {string}
 */
proto.programming_lab.prolab_accounts.OAuthLoginResponse.prototype.getRedirectUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.programming_lab.prolab_accounts.OAuthLoginResponse.prototype.setRedirectUrl = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.programming_lab.prolab_accounts.StartOAuthConsentRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.programming_lab.prolab_accounts.StartOAuthConsentRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.programming_lab.prolab_accounts.StartOAuthConsentRequest.displayName = 'proto.programming_lab.prolab_accounts.StartOAuthConsentRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.programming_lab.prolab_accounts.StartOAuthConsentRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.programming_lab.prolab_accounts.StartOAuthConsentRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.programming_lab.prolab_accounts.StartOAuthConsentRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.programming_lab.prolab_accounts.StartOAuthConsentRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    consentChallenge: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.programming_lab.prolab_accounts.StartOAuthConsentRequest}
 */
proto.programming_lab.prolab_accounts.StartOAuthConsentRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.programming_lab.prolab_accounts.StartOAuthConsentRequest;
  return proto.programming_lab.prolab_accounts.StartOAuthConsentRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.programming_lab.prolab_accounts.StartOAuthConsentRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.programming_lab.prolab_accounts.StartOAuthConsentRequest}
 */
proto.programming_lab.prolab_accounts.StartOAuthConsentRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setConsentChallenge(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.programming_lab.prolab_accounts.StartOAuthConsentRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.programming_lab.prolab_accounts.StartOAuthConsentRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.programming_lab.prolab_accounts.StartOAuthConsentRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.programming_lab.prolab_accounts.StartOAuthConsentRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConsentChallenge();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string consent_challenge = 1;
 * @return {string}
 */
proto.programming_lab.prolab_accounts.StartOAuthConsentRequest.prototype.getConsentChallenge = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.programming_lab.prolab_accounts.StartOAuthConsentRequest.prototype.setConsentChallenge = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.programming_lab.prolab_accounts.StartOAuthConsentResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.programming_lab.prolab_accounts.StartOAuthConsentResponse.repeatedFields_, null);
};
goog.inherits(proto.programming_lab.prolab_accounts.StartOAuthConsentResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.programming_lab.prolab_accounts.StartOAuthConsentResponse.displayName = 'proto.programming_lab.prolab_accounts.StartOAuthConsentResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.programming_lab.prolab_accounts.StartOAuthConsentResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.programming_lab.prolab_accounts.StartOAuthConsentResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.programming_lab.prolab_accounts.StartOAuthConsentResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.programming_lab.prolab_accounts.StartOAuthConsentResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.programming_lab.prolab_accounts.StartOAuthConsentResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    skip: jspb.Message.getFieldWithDefault(msg, 1, false),
    redirectUrl: jspb.Message.getFieldWithDefault(msg, 2, ""),
    requestedScopesList: jspb.Message.getRepeatedField(msg, 3),
    client: (f = msg.getClient()) && type_client_pb.Client.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.programming_lab.prolab_accounts.StartOAuthConsentResponse}
 */
proto.programming_lab.prolab_accounts.StartOAuthConsentResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.programming_lab.prolab_accounts.StartOAuthConsentResponse;
  return proto.programming_lab.prolab_accounts.StartOAuthConsentResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.programming_lab.prolab_accounts.StartOAuthConsentResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.programming_lab.prolab_accounts.StartOAuthConsentResponse}
 */
proto.programming_lab.prolab_accounts.StartOAuthConsentResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSkip(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRedirectUrl(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addRequestedScopes(value);
      break;
    case 4:
      var value = new type_client_pb.Client;
      reader.readMessage(value,type_client_pb.Client.deserializeBinaryFromReader);
      msg.setClient(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.programming_lab.prolab_accounts.StartOAuthConsentResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.programming_lab.prolab_accounts.StartOAuthConsentResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.programming_lab.prolab_accounts.StartOAuthConsentResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.programming_lab.prolab_accounts.StartOAuthConsentResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSkip();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getRedirectUrl();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRequestedScopesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getClient();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      type_client_pb.Client.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool skip = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.programming_lab.prolab_accounts.StartOAuthConsentResponse.prototype.getSkip = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.programming_lab.prolab_accounts.StartOAuthConsentResponse.prototype.setSkip = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string redirect_url = 2;
 * @return {string}
 */
proto.programming_lab.prolab_accounts.StartOAuthConsentResponse.prototype.getRedirectUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.programming_lab.prolab_accounts.StartOAuthConsentResponse.prototype.setRedirectUrl = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string requested_scopes = 3;
 * @return {!Array<string>}
 */
proto.programming_lab.prolab_accounts.StartOAuthConsentResponse.prototype.getRequestedScopesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<string>} value */
proto.programming_lab.prolab_accounts.StartOAuthConsentResponse.prototype.setRequestedScopesList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.programming_lab.prolab_accounts.StartOAuthConsentResponse.prototype.addRequestedScopes = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.programming_lab.prolab_accounts.StartOAuthConsentResponse.prototype.clearRequestedScopesList = function() {
  this.setRequestedScopesList([]);
};


/**
 * optional type.Client client = 4;
 * @return {?proto.programming_lab.prolab_accounts.type.Client}
 */
proto.programming_lab.prolab_accounts.StartOAuthConsentResponse.prototype.getClient = function() {
  return /** @type{?proto.programming_lab.prolab_accounts.type.Client} */ (
    jspb.Message.getWrapperField(this, type_client_pb.Client, 4));
};


/** @param {?proto.programming_lab.prolab_accounts.type.Client|undefined} value */
proto.programming_lab.prolab_accounts.StartOAuthConsentResponse.prototype.setClient = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.programming_lab.prolab_accounts.StartOAuthConsentResponse.prototype.clearClient = function() {
  this.setClient(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.programming_lab.prolab_accounts.StartOAuthConsentResponse.prototype.hasClient = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.programming_lab.prolab_accounts.OAuthConsentRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.programming_lab.prolab_accounts.OAuthConsentRequest.repeatedFields_, null);
};
goog.inherits(proto.programming_lab.prolab_accounts.OAuthConsentRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.programming_lab.prolab_accounts.OAuthConsentRequest.displayName = 'proto.programming_lab.prolab_accounts.OAuthConsentRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.programming_lab.prolab_accounts.OAuthConsentRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.programming_lab.prolab_accounts.OAuthConsentRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.programming_lab.prolab_accounts.OAuthConsentRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.programming_lab.prolab_accounts.OAuthConsentRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.programming_lab.prolab_accounts.OAuthConsentRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    consentChallenge: jspb.Message.getFieldWithDefault(msg, 1, ""),
    accept: jspb.Message.getFieldWithDefault(msg, 2, false),
    grantScopesList: jspb.Message.getRepeatedField(msg, 3),
    remember: jspb.Message.getFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.programming_lab.prolab_accounts.OAuthConsentRequest}
 */
proto.programming_lab.prolab_accounts.OAuthConsentRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.programming_lab.prolab_accounts.OAuthConsentRequest;
  return proto.programming_lab.prolab_accounts.OAuthConsentRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.programming_lab.prolab_accounts.OAuthConsentRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.programming_lab.prolab_accounts.OAuthConsentRequest}
 */
proto.programming_lab.prolab_accounts.OAuthConsentRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setConsentChallenge(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAccept(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addGrantScopes(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRemember(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.programming_lab.prolab_accounts.OAuthConsentRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.programming_lab.prolab_accounts.OAuthConsentRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.programming_lab.prolab_accounts.OAuthConsentRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.programming_lab.prolab_accounts.OAuthConsentRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConsentChallenge();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAccept();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getGrantScopesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getRemember();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional string consent_challenge = 1;
 * @return {string}
 */
proto.programming_lab.prolab_accounts.OAuthConsentRequest.prototype.getConsentChallenge = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.programming_lab.prolab_accounts.OAuthConsentRequest.prototype.setConsentChallenge = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool accept = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.programming_lab.prolab_accounts.OAuthConsentRequest.prototype.getAccept = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.programming_lab.prolab_accounts.OAuthConsentRequest.prototype.setAccept = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * repeated string grant_scopes = 3;
 * @return {!Array<string>}
 */
proto.programming_lab.prolab_accounts.OAuthConsentRequest.prototype.getGrantScopesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<string>} value */
proto.programming_lab.prolab_accounts.OAuthConsentRequest.prototype.setGrantScopesList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.programming_lab.prolab_accounts.OAuthConsentRequest.prototype.addGrantScopes = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.programming_lab.prolab_accounts.OAuthConsentRequest.prototype.clearGrantScopesList = function() {
  this.setGrantScopesList([]);
};


/**
 * optional bool remember = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.programming_lab.prolab_accounts.OAuthConsentRequest.prototype.getRemember = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.programming_lab.prolab_accounts.OAuthConsentRequest.prototype.setRemember = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.programming_lab.prolab_accounts.OAuthConsentResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.programming_lab.prolab_accounts.OAuthConsentResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.programming_lab.prolab_accounts.OAuthConsentResponse.displayName = 'proto.programming_lab.prolab_accounts.OAuthConsentResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.programming_lab.prolab_accounts.OAuthConsentResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.programming_lab.prolab_accounts.OAuthConsentResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.programming_lab.prolab_accounts.OAuthConsentResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.programming_lab.prolab_accounts.OAuthConsentResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    redirectUrl: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.programming_lab.prolab_accounts.OAuthConsentResponse}
 */
proto.programming_lab.prolab_accounts.OAuthConsentResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.programming_lab.prolab_accounts.OAuthConsentResponse;
  return proto.programming_lab.prolab_accounts.OAuthConsentResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.programming_lab.prolab_accounts.OAuthConsentResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.programming_lab.prolab_accounts.OAuthConsentResponse}
 */
proto.programming_lab.prolab_accounts.OAuthConsentResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRedirectUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.programming_lab.prolab_accounts.OAuthConsentResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.programming_lab.prolab_accounts.OAuthConsentResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.programming_lab.prolab_accounts.OAuthConsentResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.programming_lab.prolab_accounts.OAuthConsentResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRedirectUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string redirect_url = 1;
 * @return {string}
 */
proto.programming_lab.prolab_accounts.OAuthConsentResponse.prototype.getRedirectUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.programming_lab.prolab_accounts.OAuthConsentResponse.prototype.setRedirectUrl = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


goog.object.extend(exports, proto.programming_lab.prolab_accounts);
