/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_api_annotations_pb = require('./google/api/annotations_pb.js');
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.exportSymbol('proto.com.github.ProgrammingLab.prolab_accounts.api.CreateUserRequest', null, global);
goog.exportSymbol('proto.com.github.ProgrammingLab.prolab_accounts.api.GetCurrentUserRequest', null, global);
goog.exportSymbol('proto.com.github.ProgrammingLab.prolab_accounts.api.GetUserRequest', null, global);
goog.exportSymbol('proto.com.github.ProgrammingLab.prolab_accounts.api.ListUsersRequest', null, global);
goog.exportSymbol('proto.com.github.ProgrammingLab.prolab_accounts.api.ListUsersResponse', null, global);
goog.exportSymbol('proto.com.github.ProgrammingLab.prolab_accounts.api.UpdatePasswordRequest', null, global);
goog.exportSymbol('proto.com.github.ProgrammingLab.prolab_accounts.api.UpdateUserRequest', null, global);
goog.exportSymbol('proto.com.github.ProgrammingLab.prolab_accounts.api.User', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.User = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.github.ProgrammingLab.prolab_accounts.api.User, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.github.ProgrammingLab.prolab_accounts.api.User.displayName = 'proto.com.github.ProgrammingLab.prolab_accounts.api.User';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.User.prototype.toObject = function(opt_includeInstance) {
  return proto.com.github.ProgrammingLab.prolab_accounts.api.User.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.github.ProgrammingLab.prolab_accounts.api.User} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.User.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    email: jspb.Message.getFieldWithDefault(msg, 3, ""),
    fullName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    avatarUrl: jspb.Message.getFieldWithDefault(msg, 5, ""),
    description: jspb.Message.getFieldWithDefault(msg, 6, ""),
    grade: jspb.Message.getFieldWithDefault(msg, 7, 0),
    left: jspb.Message.getFieldWithDefault(msg, 8, false),
    department: jspb.Message.getFieldWithDefault(msg, 9, ""),
    shortDepartment: jspb.Message.getFieldWithDefault(msg, 10, ""),
    role: jspb.Message.getFieldWithDefault(msg, 11, ""),
    twitterScreenName: jspb.Message.getFieldWithDefault(msg, 12, ""),
    githubUserName: jspb.Message.getFieldWithDefault(msg, 13, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.github.ProgrammingLab.prolab_accounts.api.User}
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.User.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.github.ProgrammingLab.prolab_accounts.api.User;
  return proto.com.github.ProgrammingLab.prolab_accounts.api.User.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.github.ProgrammingLab.prolab_accounts.api.User} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.github.ProgrammingLab.prolab_accounts.api.User}
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.User.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFullName(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAvatarUrl(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGrade(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLeft(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setDepartment(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setShortDepartment(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setRole(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setTwitterScreenName(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setGithubUserName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.User.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.github.ProgrammingLab.prolab_accounts.api.User.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.github.ProgrammingLab.prolab_accounts.api.User} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.User.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getFullName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getAvatarUrl();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getGrade();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getLeft();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getDepartment();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getShortDepartment();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getRole();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getTwitterScreenName();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getGithubUserName();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
};


/**
 * optional uint32 user_id = 1;
 * @return {number}
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.User.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.github.ProgrammingLab.prolab_accounts.api.User.prototype.setUserId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.User.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.com.github.ProgrammingLab.prolab_accounts.api.User.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string email = 3;
 * @return {string}
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.User.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.com.github.ProgrammingLab.prolab_accounts.api.User.prototype.setEmail = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string full_name = 4;
 * @return {string}
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.User.prototype.getFullName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.com.github.ProgrammingLab.prolab_accounts.api.User.prototype.setFullName = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string avatar_url = 5;
 * @return {string}
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.User.prototype.getAvatarUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.com.github.ProgrammingLab.prolab_accounts.api.User.prototype.setAvatarUrl = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string description = 6;
 * @return {string}
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.User.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.com.github.ProgrammingLab.prolab_accounts.api.User.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional int32 grade = 7;
 * @return {number}
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.User.prototype.getGrade = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.com.github.ProgrammingLab.prolab_accounts.api.User.prototype.setGrade = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional bool left = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.User.prototype.getLeft = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.com.github.ProgrammingLab.prolab_accounts.api.User.prototype.setLeft = function(value) {
  jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional string department = 9;
 * @return {string}
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.User.prototype.getDepartment = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.com.github.ProgrammingLab.prolab_accounts.api.User.prototype.setDepartment = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string short_department = 10;
 * @return {string}
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.User.prototype.getShortDepartment = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.com.github.ProgrammingLab.prolab_accounts.api.User.prototype.setShortDepartment = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string role = 11;
 * @return {string}
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.User.prototype.getRole = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.com.github.ProgrammingLab.prolab_accounts.api.User.prototype.setRole = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string twitter_screen_name = 12;
 * @return {string}
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.User.prototype.getTwitterScreenName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.com.github.ProgrammingLab.prolab_accounts.api.User.prototype.setTwitterScreenName = function(value) {
  jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string github_user_name = 13;
 * @return {string}
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.User.prototype.getGithubUserName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.com.github.ProgrammingLab.prolab_accounts.api.User.prototype.setGithubUserName = function(value) {
  jspb.Message.setProto3StringField(this, 13, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.ListUsersRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.github.ProgrammingLab.prolab_accounts.api.ListUsersRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.github.ProgrammingLab.prolab_accounts.api.ListUsersRequest.displayName = 'proto.com.github.ProgrammingLab.prolab_accounts.api.ListUsersRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.ListUsersRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.com.github.ProgrammingLab.prolab_accounts.api.ListUsersRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.github.ProgrammingLab.prolab_accounts.api.ListUsersRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.ListUsersRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    pageToken: jspb.Message.getFieldWithDefault(msg, 1, 0),
    pageSize: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.github.ProgrammingLab.prolab_accounts.api.ListUsersRequest}
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.ListUsersRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.github.ProgrammingLab.prolab_accounts.api.ListUsersRequest;
  return proto.com.github.ProgrammingLab.prolab_accounts.api.ListUsersRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.github.ProgrammingLab.prolab_accounts.api.ListUsersRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.github.ProgrammingLab.prolab_accounts.api.ListUsersRequest}
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.ListUsersRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPageToken(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPageSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.ListUsersRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.github.ProgrammingLab.prolab_accounts.api.ListUsersRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.github.ProgrammingLab.prolab_accounts.api.ListUsersRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.ListUsersRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPageToken();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getPageSize();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional uint32 page_token = 1;
 * @return {number}
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.ListUsersRequest.prototype.getPageToken = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.github.ProgrammingLab.prolab_accounts.api.ListUsersRequest.prototype.setPageToken = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 page_size = 2;
 * @return {number}
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.ListUsersRequest.prototype.getPageSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.com.github.ProgrammingLab.prolab_accounts.api.ListUsersRequest.prototype.setPageSize = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.ListUsersResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.com.github.ProgrammingLab.prolab_accounts.api.ListUsersResponse.repeatedFields_, null);
};
goog.inherits(proto.com.github.ProgrammingLab.prolab_accounts.api.ListUsersResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.github.ProgrammingLab.prolab_accounts.api.ListUsersResponse.displayName = 'proto.com.github.ProgrammingLab.prolab_accounts.api.ListUsersResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.ListUsersResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.ListUsersResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.com.github.ProgrammingLab.prolab_accounts.api.ListUsersResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.github.ProgrammingLab.prolab_accounts.api.ListUsersResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.ListUsersResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    usersList: jspb.Message.toObjectList(msg.getUsersList(),
    proto.com.github.ProgrammingLab.prolab_accounts.api.User.toObject, includeInstance),
    nextPageToken: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.github.ProgrammingLab.prolab_accounts.api.ListUsersResponse}
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.ListUsersResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.github.ProgrammingLab.prolab_accounts.api.ListUsersResponse;
  return proto.com.github.ProgrammingLab.prolab_accounts.api.ListUsersResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.github.ProgrammingLab.prolab_accounts.api.ListUsersResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.github.ProgrammingLab.prolab_accounts.api.ListUsersResponse}
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.ListUsersResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.com.github.ProgrammingLab.prolab_accounts.api.User;
      reader.readMessage(value,proto.com.github.ProgrammingLab.prolab_accounts.api.User.deserializeBinaryFromReader);
      msg.addUsers(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNextPageToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.ListUsersResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.github.ProgrammingLab.prolab_accounts.api.ListUsersResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.github.ProgrammingLab.prolab_accounts.api.ListUsersResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.ListUsersResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.com.github.ProgrammingLab.prolab_accounts.api.User.serializeBinaryToWriter
    );
  }
  f = message.getNextPageToken();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * repeated User users = 1;
 * @return {!Array<!proto.com.github.ProgrammingLab.prolab_accounts.api.User>}
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.ListUsersResponse.prototype.getUsersList = function() {
  return /** @type{!Array<!proto.com.github.ProgrammingLab.prolab_accounts.api.User>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.com.github.ProgrammingLab.prolab_accounts.api.User, 1));
};


/** @param {!Array<!proto.com.github.ProgrammingLab.prolab_accounts.api.User>} value */
proto.com.github.ProgrammingLab.prolab_accounts.api.ListUsersResponse.prototype.setUsersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.com.github.ProgrammingLab.prolab_accounts.api.User=} opt_value
 * @param {number=} opt_index
 * @return {!proto.com.github.ProgrammingLab.prolab_accounts.api.User}
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.ListUsersResponse.prototype.addUsers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.com.github.ProgrammingLab.prolab_accounts.api.User, opt_index);
};


proto.com.github.ProgrammingLab.prolab_accounts.api.ListUsersResponse.prototype.clearUsersList = function() {
  this.setUsersList([]);
};


/**
 * optional uint32 next_page_token = 2;
 * @return {number}
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.ListUsersResponse.prototype.getNextPageToken = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.com.github.ProgrammingLab.prolab_accounts.api.ListUsersResponse.prototype.setNextPageToken = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.GetUserRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.github.ProgrammingLab.prolab_accounts.api.GetUserRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.github.ProgrammingLab.prolab_accounts.api.GetUserRequest.displayName = 'proto.com.github.ProgrammingLab.prolab_accounts.api.GetUserRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.GetUserRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.com.github.ProgrammingLab.prolab_accounts.api.GetUserRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.github.ProgrammingLab.prolab_accounts.api.GetUserRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.GetUserRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.github.ProgrammingLab.prolab_accounts.api.GetUserRequest}
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.GetUserRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.github.ProgrammingLab.prolab_accounts.api.GetUserRequest;
  return proto.com.github.ProgrammingLab.prolab_accounts.api.GetUserRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.github.ProgrammingLab.prolab_accounts.api.GetUserRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.github.ProgrammingLab.prolab_accounts.api.GetUserRequest}
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.GetUserRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.GetUserRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.github.ProgrammingLab.prolab_accounts.api.GetUserRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.github.ProgrammingLab.prolab_accounts.api.GetUserRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.GetUserRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 user_id = 1;
 * @return {number}
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.GetUserRequest.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.github.ProgrammingLab.prolab_accounts.api.GetUserRequest.prototype.setUserId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.CreateUserRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.github.ProgrammingLab.prolab_accounts.api.CreateUserRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.github.ProgrammingLab.prolab_accounts.api.CreateUserRequest.displayName = 'proto.com.github.ProgrammingLab.prolab_accounts.api.CreateUserRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.CreateUserRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.com.github.ProgrammingLab.prolab_accounts.api.CreateUserRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.github.ProgrammingLab.prolab_accounts.api.CreateUserRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.CreateUserRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && proto.com.github.ProgrammingLab.prolab_accounts.api.User.toObject(includeInstance, f),
    registerationToken: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.github.ProgrammingLab.prolab_accounts.api.CreateUserRequest}
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.CreateUserRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.github.ProgrammingLab.prolab_accounts.api.CreateUserRequest;
  return proto.com.github.ProgrammingLab.prolab_accounts.api.CreateUserRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.github.ProgrammingLab.prolab_accounts.api.CreateUserRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.github.ProgrammingLab.prolab_accounts.api.CreateUserRequest}
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.CreateUserRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.com.github.ProgrammingLab.prolab_accounts.api.User;
      reader.readMessage(value,proto.com.github.ProgrammingLab.prolab_accounts.api.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRegisterationToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.CreateUserRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.github.ProgrammingLab.prolab_accounts.api.CreateUserRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.github.ProgrammingLab.prolab_accounts.api.CreateUserRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.CreateUserRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.com.github.ProgrammingLab.prolab_accounts.api.User.serializeBinaryToWriter
    );
  }
  f = message.getRegisterationToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional User user = 1;
 * @return {?proto.com.github.ProgrammingLab.prolab_accounts.api.User}
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.CreateUserRequest.prototype.getUser = function() {
  return /** @type{?proto.com.github.ProgrammingLab.prolab_accounts.api.User} */ (
    jspb.Message.getWrapperField(this, proto.com.github.ProgrammingLab.prolab_accounts.api.User, 1));
};


/** @param {?proto.com.github.ProgrammingLab.prolab_accounts.api.User|undefined} value */
proto.com.github.ProgrammingLab.prolab_accounts.api.CreateUserRequest.prototype.setUser = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.com.github.ProgrammingLab.prolab_accounts.api.CreateUserRequest.prototype.clearUser = function() {
  this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.CreateUserRequest.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string registeration_token = 2;
 * @return {string}
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.CreateUserRequest.prototype.getRegisterationToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.com.github.ProgrammingLab.prolab_accounts.api.CreateUserRequest.prototype.setRegisterationToken = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.GetCurrentUserRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.github.ProgrammingLab.prolab_accounts.api.GetCurrentUserRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.github.ProgrammingLab.prolab_accounts.api.GetCurrentUserRequest.displayName = 'proto.com.github.ProgrammingLab.prolab_accounts.api.GetCurrentUserRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.GetCurrentUserRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.com.github.ProgrammingLab.prolab_accounts.api.GetCurrentUserRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.github.ProgrammingLab.prolab_accounts.api.GetCurrentUserRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.GetCurrentUserRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.github.ProgrammingLab.prolab_accounts.api.GetCurrentUserRequest}
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.GetCurrentUserRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.github.ProgrammingLab.prolab_accounts.api.GetCurrentUserRequest;
  return proto.com.github.ProgrammingLab.prolab_accounts.api.GetCurrentUserRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.github.ProgrammingLab.prolab_accounts.api.GetCurrentUserRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.github.ProgrammingLab.prolab_accounts.api.GetCurrentUserRequest}
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.GetCurrentUserRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.GetCurrentUserRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.github.ProgrammingLab.prolab_accounts.api.GetCurrentUserRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.github.ProgrammingLab.prolab_accounts.api.GetCurrentUserRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.GetCurrentUserRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.UpdateUserRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.github.ProgrammingLab.prolab_accounts.api.UpdateUserRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.github.ProgrammingLab.prolab_accounts.api.UpdateUserRequest.displayName = 'proto.com.github.ProgrammingLab.prolab_accounts.api.UpdateUserRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.UpdateUserRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.com.github.ProgrammingLab.prolab_accounts.api.UpdateUserRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.github.ProgrammingLab.prolab_accounts.api.UpdateUserRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.UpdateUserRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && proto.com.github.ProgrammingLab.prolab_accounts.api.User.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.github.ProgrammingLab.prolab_accounts.api.UpdateUserRequest}
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.UpdateUserRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.github.ProgrammingLab.prolab_accounts.api.UpdateUserRequest;
  return proto.com.github.ProgrammingLab.prolab_accounts.api.UpdateUserRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.github.ProgrammingLab.prolab_accounts.api.UpdateUserRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.github.ProgrammingLab.prolab_accounts.api.UpdateUserRequest}
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.UpdateUserRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.com.github.ProgrammingLab.prolab_accounts.api.User;
      reader.readMessage(value,proto.com.github.ProgrammingLab.prolab_accounts.api.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.UpdateUserRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.github.ProgrammingLab.prolab_accounts.api.UpdateUserRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.github.ProgrammingLab.prolab_accounts.api.UpdateUserRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.UpdateUserRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.com.github.ProgrammingLab.prolab_accounts.api.User.serializeBinaryToWriter
    );
  }
};


/**
 * optional User user = 1;
 * @return {?proto.com.github.ProgrammingLab.prolab_accounts.api.User}
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.UpdateUserRequest.prototype.getUser = function() {
  return /** @type{?proto.com.github.ProgrammingLab.prolab_accounts.api.User} */ (
    jspb.Message.getWrapperField(this, proto.com.github.ProgrammingLab.prolab_accounts.api.User, 1));
};


/** @param {?proto.com.github.ProgrammingLab.prolab_accounts.api.User|undefined} value */
proto.com.github.ProgrammingLab.prolab_accounts.api.UpdateUserRequest.prototype.setUser = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.com.github.ProgrammingLab.prolab_accounts.api.UpdateUserRequest.prototype.clearUser = function() {
  this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.UpdateUserRequest.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.UpdatePasswordRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.github.ProgrammingLab.prolab_accounts.api.UpdatePasswordRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.github.ProgrammingLab.prolab_accounts.api.UpdatePasswordRequest.displayName = 'proto.com.github.ProgrammingLab.prolab_accounts.api.UpdatePasswordRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.UpdatePasswordRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.com.github.ProgrammingLab.prolab_accounts.api.UpdatePasswordRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.github.ProgrammingLab.prolab_accounts.api.UpdatePasswordRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.UpdatePasswordRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    password: jspb.Message.getFieldWithDefault(msg, 1, ""),
    newPassword: jspb.Message.getFieldWithDefault(msg, 2, ""),
    newPasswordRepeat: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.github.ProgrammingLab.prolab_accounts.api.UpdatePasswordRequest}
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.UpdatePasswordRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.github.ProgrammingLab.prolab_accounts.api.UpdatePasswordRequest;
  return proto.com.github.ProgrammingLab.prolab_accounts.api.UpdatePasswordRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.github.ProgrammingLab.prolab_accounts.api.UpdatePasswordRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.github.ProgrammingLab.prolab_accounts.api.UpdatePasswordRequest}
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.UpdatePasswordRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewPassword(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewPasswordRepeat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.UpdatePasswordRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.github.ProgrammingLab.prolab_accounts.api.UpdatePasswordRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.github.ProgrammingLab.prolab_accounts.api.UpdatePasswordRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.UpdatePasswordRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNewPassword();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNewPasswordRepeat();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string password = 1;
 * @return {string}
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.UpdatePasswordRequest.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.com.github.ProgrammingLab.prolab_accounts.api.UpdatePasswordRequest.prototype.setPassword = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string new_password = 2;
 * @return {string}
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.UpdatePasswordRequest.prototype.getNewPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.com.github.ProgrammingLab.prolab_accounts.api.UpdatePasswordRequest.prototype.setNewPassword = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string new_password_repeat = 3;
 * @return {string}
 */
proto.com.github.ProgrammingLab.prolab_accounts.api.UpdatePasswordRequest.prototype.getNewPasswordRepeat = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.com.github.ProgrammingLab.prolab_accounts.api.UpdatePasswordRequest.prototype.setNewPasswordRepeat = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


goog.object.extend(exports, proto.com.github.ProgrammingLab.prolab_accounts.api);
